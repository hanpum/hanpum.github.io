#+OPTIONS: ^:{}

1. 在C++ 程序中调用被C 编译器编译后的函数，为什么要加extern “C”？
   - extern, 表明来自其它模块或者可以被其它模块使用
   - 解决链接中的名字问题

2. 头文件中的ifndef/define/endif有什么作用？
   - 条件编译
   - 头文件保护

3. ＃include<file.h> 与 ＃include "file.h"的区别？
   - 搜索路径不一样

4. 评价一下C/C++各自的特点
   - C: 面向过程, 以流程为主, 简单
   - C++: 面向对象，语言的原子表达能力比C要强

5. const 有什么用途？
   - 声明常量: 变量，函数参数，函数返回值

6. const和#define有什么区别？
   - 有类型/无类型
   - #define 预处理，字符串层面操作代码
   - const 程序的原生关键字

7. 关于sizeof小结的。

8. sizeof与strlen的区别？
   - sizeof 编译期, strlen 运行期
   - strlen 只能用作字符串，sizeof可以用到变量，结构体，函数上
   - 返回类型: size_t VS int

9. 指针和引用的区别？

10. 数组和指针的区别？

11. 空指针和悬垂指针的区别？

12. C++中有malloc/free，为什么还有new/delete？
    new/delete 是C++ 运算符，属于语言自身的特性，可以自动触发构造函数，析构函数

13. 什么是智能指针？

14. 面向对象技术的基本概念是什么，三个基本特征是什么？
    - 封装
    - 继承
    - 多态

15. C++空类默认有哪些成员函数？
    默认构造函数、析构函数、复制构造函数、赋值函数

16. 哪一种成员变量可以在一个类的实例之间共享？

17. 继承层次中，为什么基类析构函数是虚函数？
    编译器总是根据类型来调用类成员函数。但是一个派生类的指针可以安全地
    转化为一个基类的指针。这样删除一个基类的指针的时候，C++不管这个指
    针指向一个基类对象还是一个派生类的对象，调用的都是基类的析构函数而
    不是派生类的。如果你依赖于派生类的析构函数的代码来释放资源，而没有
    重载析构函数，那么会有资源泄漏。

18. 为什么构造函数不能为虚函数？

19. 如果虚函数是有效的，那为什么不把所有函数设为虚函数？
    不行。首先，虚函数是有代价的，由于每个虚函数的对象都要维护一个虚函数表，因此在使用虚函数的时候都会产生一定的系统开销，这是没有必要的。

20. 构造函数可以是内联函数

21. 什么是多态？多态有什么作用？
    - 多态就是将基类类型的指针或者引用指向派生类型的对象。多态通过虚函数机制实现。
    - 多态的作用是接口重用。

22. 重载和覆盖有什么区别？

23. 公有继承、受保护继承、私有继承
    基类中的公有/保护名字访问的继承机制差异
    - 公有继承: 保持不变
    - 保护继承: 受保护
    - 私有继承: 全部改为私有
    - 私有成员一直是私有

24. 公有继承时基类受保护的成员，可以通过派生类对象访问但不能修改。

25. 有哪几种情况只能用构造函数初始化列表而不能用赋值初始化？
    - const成员，引用成员

26. 什么是虚指针？
    虚函数表指针

27. C++如何阻止一个类被实例化？一般在什么时候将构造函数声明为private？
    - 纯虚函数
    - private 构造函数

28. main函数执行之前会执行什么？执行之后还能执行代码吗？
    - 全局变量
    - premain
    - _onexit

29. 请描述进程和线程的区别？
    - 进程: 内核资源调度管理单位, 不考虑多线程的话，只能有一个在处理器
      上运行，切换的时候需要内核干预
    - 线程: 进程中的子调度单元, 可以有多个同时在处理器上运行, 同一个进
      程中的线程可以共享堆栈资源, 可以在用户态进行切换

30. 进程间如何通信
    - 信号、信号量、消息队列、共享内存

31. 在网络编程中涉及并发服务器，使用多进程与多线程的区别？
    - 线程执行开销小，但不利于资源管理和保护；进程则相反，进程可跨越机器迁移。
    - 多进程时每个进程都有自己的内存空间，而多线程间共享内存空间；
    - 线程产生的速度快，线程间通信快、切换快；
    - 线程的资源利用率比较好；
    - 线程使用公共变量或者资源时需要同步机制。

32. 说一下TCP 3次握手、4次挥手的全过程。

33. TCP和UDP有什么区别。

34. 如何编写套接字？

35. 调用函数时要进行参数压栈，一般情况下顺序是从最右边参数往左压栈。

36. 经常要操作的内存分为那几个类别？
    - 栈: 函数调用，局部调用栈帧
    - 堆: 动态开辟，进程独有
    - 静态变量：全局数据
    - 文字常量
    - 代码区

37. 请讲述堆和栈的区别。
    - 申请方式不同。栈上有系统自动分配和释放；堆上有程序员自己申请并指明大小；
    - 栈是向低地址扩展的数据结构，大小很有限；堆是向高地址扩展，是不连续的内存区域，空间相对大且灵活；
    - 栈由系统分配和释放速度快；堆由程序员控制，一般较慢，且容易产生碎片；

38. 数据存放
    - 全局变量放在数据段
    - 内部变量static int count；放在数据段
    - 内部变量char *p=“AAA”，p的位置在堆栈上，指向的空间的位置数据段
    - 内部变量char *p=new char；p的位置堆，指向的空间的位置数据段

39. 字符数组与字符串的比较：最明显的区别是字符串会在末尾自动添加空字符。

40. 函数指针相关概念（C++学习笔记）

41. 类使用static成员的优点，如何访问？
    - static 成员的名字是在类的作用域中，因此可以避免与其他类的成员或全局对象名字冲突；
    - 可以实施封装。static 成员可以是私有成员，而全局对象不可以；
    - static 成员是与特定类关联的，可清晰地显示程序员的意图。

    *TIPS*
    - static 数据成员必须在类定义体的外部定义(正好一次) 
    - static 关键字只能用于类定义体内部的声明中，定义不能标示为static. 不像普通数据成员，
    static成员不是通过类构造函数进行初始化，也不能在类的声明中初始化，
    而是应该在定义时进行初始化.保证对象正好定义一次的最好办法，就是将
    static 数据成员的定义放在包含类非内联成员函数定义的文件中。

42. static数据成员和static成员函数

43. static成员变量定义放在cpp文件中，不能放在初始化列表中。Const static成员可就地初始化。

44. 如何引用一个已经定义过的全局变量？

45. static关键字的作用

   答：static总是使得变量或对象的存储形式变成静态存储，连接方式变成内部连接，对于局部变量（已经是内部连接了），它仅改变其存储方式；对于全局变量（已经是静态存储了），它仅改变其连接类型。

46. 奈奎斯特定理
    - 波特率
    - 比特率
    - 带宽
    - 容量

47. 香农定理

48. 多态类中的虚函数表是 Compile-Time，还是 Run-Time时建立的?
    虚拟函数表是在编译期就建立了,各个虚拟函数这时被组织成了一个虚拟函
    数的入口地址的数组。而对象的隐藏成员--虚拟函数表指针是在运行期--也
    就是构造函数被调用时进行初始化的，这是实现多态的关键。

49. 一个父类写了一个 virtual 函数，如果子类覆盖它的函数不加 virtual ,也能实现多态?
    在子类的空间里，有没有父类的这个函数，或者父类的私有变量? (华为笔试题）

    只要基类在定义成员函数时已经声明了 virtue关键字，在派生类实现的时
    候覆盖该函数时，virtue关键字可加可不加，不影响多态的实现。子类的空
    间里有父类的所有变量(static除外)。

50. 完成字符串拷贝可以使用 sprintf、strcpy 及 memcpy 函数，请问这些函数有什么区别，你喜欢使用哪个，为什么？
    - sprintf: 字符串格式化输出, 包含结尾的0
    - strcpy: 纯字符串复制, 包括结尾的0
    - memcpy: 内存复制，可以是任意地址

51. 应用程序在运行时的内存包括代码区和数据区，其中数据区又包括哪些部分？
    - 静态数据区: 全局变量，静态变量，字符串
    - 动态数据区: 堆栈 

52. C++函数中值的传递方式有哪几种?
    答：三种传递方式为：值传递、指针传递和引用传递。

53. C++里面是不是所有的动作都是main()引起的？如果不是，请举例.
    全局变量初始化，onexit函数

54. 内联函数在编译时是否做参数类型检查？
    内联函数要做参数类型检查, 这是内联函数跟宏相比的优势。

55. 全局变量和局部变量有什么区别？实怎么实现的？操作系统和编译器是怎么知道的？
    - 生命周期不同：
      全局变量随主程序创建和创建，随主程序销毁而销毁
      局部变量在局部函数内部，甚至局部循环体等内部存在，退出就不存在
    - 使用方式不同：通过声明后全局变量程序的各个部分都可以用到；局部变量只能在局部使用，分配在栈区

56. 有 A 、 B 、 C 、 D 四个人，要在夜里过一座桥。他们通过这座桥分别需要耗时 1 、 2 、 5 、 10 分钟，只有一支手电，并且同时最多只能两个人一起过桥。请问，如何安排，能够在 17 分钟内这四个人都过桥？

57. static全局变量与普通的全局变量有什么区别？static局部变量和普通局部变量有什么区别？static函数与普通函数有什么区别？
    static全局变量与普通全局变量区别：static全局变量只初使化一次，防止
    在其他文件单元中被引用; static局部变量和普通局部变量区别：static局
    部变量只被初始化一次，下一次依据上一次结果值；static函数与普通函数
    区别：static函数在内存中只有一份，普通函数在每个被调用中维持一份拷
    贝。程序的局部变量存在于（堆栈）中，全局变量存在于（静态区 ）中，
    动态申请数据存在于（ 堆）中。

58. 对于一个频繁使用的短小函数,在C语言中应用什么实现,在C++中应用什么实现?

59. 有1,2,....一直到n的无序数组,求排序算法,并且要求时间复杂度为O(n),空间复杂度O(1),使用交换,而且一次只能交换两个数。
    
60. explicite的作用
    避免强制类型转换
    
61. 类型转换
    1. static_cast: 不同类型之间的转换 
    2. dynamic_cast: 类层级关系之间的转换
       Safely converts pointers and references to classes up, down, and sideways along the inheritance hierarchy.
       - 同类型加上const 或者 volatility
    3. const_cast:   常量，非常量之间的转换
    4. reinterpret_cast: 
      
* DONE volatile 关键字
  每次都从内存中重新读取指定变量，而非使用缓存优化版本

* TODO 智能指针 & 弱指针
* TODO 多线程编程 
** TODO 同步
   
* TODO 内存优化
* TODO 性能优化
